---

- name: "Setup"
  gather_facts: True
  hosts: localhost
  vars:
    zpool:
      name: "rpool"

  tasks:
    - name: "Gather packages"
      package_facts:
        manager: "auto"

    - become: True
      block:

        - name: "Debian sources"
          ansible.builtin.copy:
            dest: "/etc/apt/sources.list"
            mode: "0644"
            content: |
              deb http://deb.debian.org/debian/ testing main contrib non-free non-free-firmware
              deb-src http://deb.debian.org/debian/ testing main contrib non-free non-free-firmware
              
              deb http://security.debian.org/debian-security testing-security main contrib non-free non-free-firmware
              deb-src http://security.debian.org/debian-security testing-security main contrib non-free non-free-firmware
              
              deb http://deb.debian.org/debian/ testing-updates main contrib non-free non-free-firmware
              deb-src http://deb.debian.org/debian/ testing-updates main contrib non-free non-free-firmware
          register: "sources_list"

        - name: "Apt upgrade"
          ansible.builtin.apt:
            update_cache: True
            upgrade: "full"
            dpkg_options: "force-confnew,force-confdef"
          register: "apt_upgrade"
          when: sources_list.changed

        - name: "Reboot"
          ansible.builtin.reboot:
          when: apt_upgrade.changed

        - name: "Install tools"
          ansible.builtin.apt:
            package:
              - "vim"

        - name: "Wi-Fi interface config template"
          ansible.builtin.copy:
            content: |
              allow-hotplug {{ item }}
              iface {{ item }} inet dhcp
                  wpa-ssid "ssid"
                  wpa-psk "psk"
            dest: "/etc/network/interfaces.d/{{ item }}"
            force: False
            mode: "0644"
          loop: "{{ ansible_interfaces }}"
          when: "'wlp' in item"

        # https://gist.github.com/Vertecedoc4545/3b077301299c20c5b9b4db00f4ca6000
        - name: "Build dependencies"
          ansible.builtin.apt:
            package:
              # not using from git:
              - libdisplay-info-dev
              - libinput-dev
              - libliftoff-dev
              - wayland-protocols
              # required
              - build-essential
              - cmake
              - cmake-extras
              - fontconfig
              - gettext
              - gettext-base
              - meson
              - ninja-build
              - wget
              # to investigate
              - hwdata
              #- check
              - libgtk-3-dev
              - libsystemd-dev
              - xwayland
              - kitty
              - edid-decode
              - glslang-tools
              - libavcodec-dev
              - libavformat-dev
              - libavutil-dev
              - libdrm-dev
              - libegl-dev
              - libegl1-mesa-dev
              - libffi-dev
              - libfontconfig-dev
              - libgbm-dev
              - libgles2
              - libgulkan-dev
              - libinput-bin
              - libinput-dev
              - libpixman-1-dev
              - libseat-dev
              - libudev-dev
              - libvkfft-dev
              - libvulkan-dev
              - libvulkan-volk-dev
              - libxcb-composite0-dev
              - libxcb-dri3-dev
              - libxcb-ewmh-dev
              - libxcb-ewmh2
              - libxcb-icccm4-dev
              - libxcb-present-dev
              - libxcb-render-util0-dev
              - libxcb-res0-dev
              - libxcb-xinput-dev
              - libxkbcommon-dev
              - libxkbcommon-x11-dev
              - libxkbregistry-dev
              - libxml2-dev
              - seatd
              - vulkan-utility-libraries-dev
              - xdg-desktop-portal-wlr

        - name: "Create /tmp/setup/repositories"
          ansible.builtin.file:
            path: "/tmp/setup/repositories"
            state: "directory"

        - name: "Git checkout Hyprland"
          ansible.builtin.git:
            dest: "/tmp/setup/repositories/Hyprland"
            force: True
            repo: "https://github.com/hyprwm/Hyprland.git"
            version: "v0.24.1"

        - name: "Git checkout wayland"
          ansible.builtin.git:
            dest: "/tmp/setup/repositories/wayland"
            force: True
            repo: "https://gitlab.freedesktop.org/wayland/wayland.git"
            version: "1.22.0"

#        - name: "Build wayland"
#          ansible.builtin.shell: |
#            mkdir -p /tmp/setup/repositories/wayland/build && cd "$_"
#            meson setup .. --prefix=/usr --buildtype=release -Ddocumentation=false
#            ninja
#            ninja install
#          args:
#            executable: /bin/bash
#
#        - name: "Install Simple Desktop Display Manager"
#          ansible.builtin.apt:
#            install_recommends: False
#            package:
#              - "sddm"
#
#        - name: "Enable SDDM"
#          ansible.builtin.systemd:
#            name: "sddm.service"
#            enabled: True
#
#        - name: "Create wayland-sessions directory"
#          ansible.builtin.file:
#            path: "/usr/share/wayland-sessions"
#            state: directory
#            owner: root
#            group: root
#            mode: 0755
#
#        - name: "Create wayland desktop entry for hyprland"
#          ansible.builtin.copy:
#            dest: "/usr/share/wayland-sessions/hyprland.desktop"
#            mode: "0644"
#            content: |
#              [Desktop Entry]
#              Name=Hyprland
#              Comment=An intelligent dynamic tiling Wayland compositor
#              Exec=Hyprland
#              Type=Application

#        - name: "Install utils"
#          ansible.builtin.apt:
#            package:
#              - "debootstrap"
#              - "dkms"
#              - "gdisk"
#              - "linux-headers-{{ ansible_kernel }}"
#              - "parted"
#              - "zfs-dkms"
#              - "zfs-zed"
#              - "zfsutils-linux"
#
#        - ansible.builtin.set_fact:
#            disks: "{{ ansible_facts.devices | select('match', '^nvme') | default(false) }}"
#
#        - ansible.builtin.set_fact:
#            disk:
#              device: "/dev/{{ disks | length > 1 or disks | first | default(false) }}"
#              name: "{{ disks | length > 1 or disks | first | default(false) }}"
#            partitions:
#              numbers:
#                boot: 1
#                swap: 2
#                pool: 3
#
#        - ansible.builtin.set_fact:
#            partitions:
#              devices:
#                boot: "{{ disk.device }}p{{ partitions.numbers.boot }}"
#                swap: "{{ disk.device }}p{{ partitions.numbers.swap }}"
#                pool: "{{ disk.device }}p{{ partitions.numbers.pool }}"
#              names:
#                boot: "{{ disk.name }}p{{ partitions.numbers.boot }}"
#                swap: "{{ disk.name }}p{{ partitions.numbers.swap }}"
#                pool: "{{ disk.name }}p{{ partitions.numbers.pool }}"
#              numbers: "{{ partitions.numbers }}"
#
#        - ansible.builtin.shell: |
#            umount -nqR /mnt
#            zpool export -af
#
#            zpool labelclear -f "{{ partitions.devices.pool }}"
#            wipefs -af "{{ disk.device }}"
#            sgdisk --zap-all "{{ disk.device }}"
#            partprobe "{{ disk.device }}"
#
#            sgdisk -n "{{ partitions.numbers.boot }}:1m:+500m" -t "{{ partitions.numbers.boot }}:ef00" -c 0:esp "{{ disk.device }}"
#            # sgdisk -n "{{ partitions.numbers.swap }}:0:+9g" -t "{{ partitions.numbers.swap }}:8200" -c 0:swap "{{ disk.device }}"
#            sgdisk -n "{{ partitions.numbers.pool }}:0:-10m" -t "{{ partitions.numbers.pool }}:bf00" -c 0:pool "{{ disk.device }}"
#            partprobe "{{ disk.device }}"
#
#            echo 'insecurepassword' > /etc/zfs/{{ zpool.name }}.key
#            chmod 000 /etc/zfs/{{ zpool.name }}.key
#
#            zpool create -f -o ashift=12 \
#              -O compression=lz4 \
#              -O acltype=posixacl \
#              -O xattr=sa \
#              -O relatime=on \
#              -o autotrim=on \
#              -O encryption=aes-256-gcm \
#              -O keylocation=file:///etc/zfs/{{ zpool.name }}.key \
#              -O keyformat=passphrase \
#              -m none {{ zpool.name }} \
#              "{{ ansible_facts.devices[disk.name].partitions[partitions.names.pool].links.ids | first }}"
#
#            zfs create -o mountpoint=none {{ zpool.name }}/ROOT
#            zfs create -o mountpoint=/ -o canmount=noauto {{ zpool.name }}/ROOT/debian
#            zfs create -o mountpoint=/home {{ zpool.name }}/home
#            zpool set bootfs={{ zpool.name }}/ROOT/debian {{ zpool.name }}
#
#            zpool export {{ zpool.name }}
#            zpool import -N -R /mnt {{ zpool.name }}
#            zfs load-key -L /etc/zfs/{{ zpool.name }}.key {{ zpool.name }}
#            zfs mount {{ zpool.name }}/ROOT/debian
#            zfs mount {{ zpool.name }}/home
#            udevadm trigger
#
#            debootstrap trixie /mnt
#            mkdir -p /mnt/etc/zfs
#            cp /etc/zfs/{{ zpool.name }}.key /mnt/etc/zfs
#
#            mount -t proc proc /mnt/proc
#            mount -t sysfs sys /mnt/sys
#            mount -B /dev /mnt/dev
#            mount -t devpts pts /mnt/dev/pts
